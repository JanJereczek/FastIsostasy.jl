var documenterSearchIndex = {"docs":
[{"location":"APIref.html#api_ref","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"APIref.html#Utils","page":"API reference","title":"Utils","text":"","category":"section"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"    meshgrid\n    init_domain\n    get_differential_fourier\n    init_physical_constants\n    init_solidearth_params\n    get_viscosity_ratio\n    three_layer_scaling\n    get_r\n    get_loadresponse_coeffs\n    build_loadresponse_matrix\n    get_integrated_loadresponse\n    get_quad_coeffs\n    quadrature1D\n    quadrature2D\n    get_normalized_lin_transform\n    normalized_lin_transform","category":"page"},{"location":"APIref.html#FastIsostasy.meshgrid","page":"API reference","title":"FastIsostasy.meshgrid","text":"meshgrid(x::Vector{T}, y::Vector{T}) where {T<:AbstractFloat}\n\nReturn a 2D meshgrid spanned by x, y.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.init_domain","page":"API reference","title":"FastIsostasy.init_domain","text":"init_domain(L::AbstractFloat, n::Int)\n\nInitialize a square computational domain with length 2*L and 2^n+1 grid cells.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.init_physical_constants","page":"API reference","title":"FastIsostasy.init_physical_constants","text":"init_physical_constants(T::Type)\n\nReturn struct containing physical constants.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.init_solidearth_params","page":"API reference","title":"FastIsostasy.init_solidearth_params","text":"init_solidearth_params(\n    T::Type,\n    Omega::ComputationDomain;\n    lithosphere_rigidity,\n    mantle_density,\n    channel_viscosity,\n    halfspace_viscosity,\n    channel_begin,\n    halfspace_begin,\n)\n\nReturn struct containing solid-Earth parameters.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.quadrature1D","page":"API reference","title":"FastIsostasy.quadrature1D","text":"quadrature1D(f, n, x1, x2)\n\nCompute 1D Gauss-Legendre quadrature of f between x1 and x2 based on n support points.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#Physics","page":"API reference","title":"Physics","text":"","category":"section"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"    precompute_terms\n    forward_isostasy!\n    forwardstep_isostasy\n    cranknicolson_viscous_response\n    euler_viscous_response\n    apply_bc\n    get_differential_fourier\n    get_cranknicolson_factors\n    plan_twoway_fft\n    compute_elastic_response","category":"page"},{"location":"APIref.html#FastIsostasy.precompute_terms","page":"API reference","title":"FastIsostasy.precompute_terms","text":"precompute_terms(\n    dt::T,\n    Omega::ComputationDomain{T},\n    p::SolidEarthParams{T},\n    c::PhysicalConstants{T};\n    quad_precision::Int = 4,\n) where {T<:AbstractFloat}\n\nReturn a struct containing pre-computed tools to perform forward-stepping. Takes the time step dt, the ComputationDomain Omega, the solid-Earth parameters p and  physical constants c as input.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.forward_isostasy!","page":"API reference","title":"FastIsostasy.forward_isostasy!","text":"function forward_isostasy!(\n    Omega::ComputationDomain,\n    t_vec::AbstractVector{T},\n    u3D_elastic::Array{T, 3},\n    u3D_viscous::Array{T, 3},\n    sigma_zz::AbstractMatrix{T},\n    tools::PrecomputedTerms,\n    p::SolidEarthParams,\n    c::PhysicalConstants,\n) where {T<:AbstractFloat}\n\nIntegrates isostasy model over provided time vector.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.forwardstep_isostasy","page":"API reference","title":"FastIsostasy.forwardstep_isostasy","text":"forwardstep_isostasy(\n    Omega::ComputationDomain,\n    dt::T,\n    u_viscous::AbstractMatrix{T},\n    sigma_zz::AbstractMatrix{T},\n    tools::PrecomputedTerms,\n    p::SolidEarthParams,\n    c::PhysicalConstants,\n    viscous_solver=\"Euler\"::String,\n    dt_refine=100::Int,\n) where {T<:AbstractFloat}\n\nForward-stepping of GIA model.\n\n\n\n\n\n","category":"function"},{"location":"index.html#FastIsostasy","page":"FastIsostasy","title":"FastIsostasy","text":"","category":"section"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"Glacial Isostatic Adjustment (GIA) denotes the evolution over time of the solid-Earth vertical displacement depending on the load applied on it. It is an important process for ice-sheet modelling, and more generally for Earth system modelling. FastIsostasy.jl performs the computation of this displacement based on a Fourier collocation method described in [ 1, 2 ]. This allows to transform the PDE describing the physics into an ODE and accelerate the computation, mainly due to the highly optimized functions available for fast-fourier transform (FFT).","category":"page"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"Compared to [1, 2], FastIsostasy.jl does not assume constant fields for parameters of the solid Earth. It thus offers an open-source and performant generalization of the original articles.","category":"page"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"tip: Star us on GitHub!\nIf you have found this library useful, please consider starring it on GitHub. This gives us an accurate lower bound of the (satisfied) user count.","category":"page"},{"location":"index.html#getting_started","page":"FastIsostasy","title":"Getting started","text":"","category":"section"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"FastIsostasy.jl is work under development and must be downloaded from GitHub to be used. It will hopefully become a registered julia package in future.","category":"page"},{"location":"index.html#A-three-layer-model","page":"FastIsostasy","title":"A three-layer model","text":"","category":"section"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"Let x, y be the coordinates spanning the projection of the Earth surface and z the depth coordinate. The present model assumes three layers over the z-dimension:","category":"page"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"The elastic lithosphere.\nA channel representing the upper mantle, usually displaying strong variance of viscosity over x and y.\nA half-space representing the rest of the mantle, usually with small variance of viscosity over x and y.","category":"page"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"The two-layer model is a special case of this and can be obtained by setting the channel parameters to be the same as the ones of the half space.","category":"page"},{"location":"index.html","page":"FastIsostasy","title":"FastIsostasy","text":"(Image: Schematic representation of the three-layer model)","category":"page"}]
}
