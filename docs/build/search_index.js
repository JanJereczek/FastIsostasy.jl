var documenterSearchIndex = {"docs":
[{"location":"examples/deglaciation.html","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"EditURL = \"deglaciation.jl\"","category":"page"},{"location":"examples/deglaciation.html#Antarctic-deglaciation","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"","category":"section"},{"location":"examples/deglaciation.html","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"We now want to provide an example that presents:","category":"page"},{"location":"examples/deglaciation.html","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"a heterogeneous lithosphere thickness\na heterogeneous upper-mantle viscosity\nvarious viscous channels\na more elaborate load that evolves over time\nchanges in the sea-level","category":"page"},{"location":"examples/deglaciation.html","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"For this we run a deglaciation of Antarctica with lithospheric thickness and upper-mantle viscosity from [Wiens2021] and the ice thickness history from [Briggs2014]. Since the load is known and the isostatic response does not influence it (one-way coupling), we can provide snapshots of the ice thickness and their associated time to FastIsoProblem. Under the hood, an interpolator is created and called within the time integration.","category":"page"},{"location":"examples/deglaciation.html","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"using CairoMakie, FastIsostasy\n# Code is coming soon!","category":"page"},{"location":"examples/deglaciation.html","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"[Wiens2021]: Douglas Wiens et al. (2021): The seismic structure of the Antarctic upper mantle","category":"page"},{"location":"examples/deglaciation.html","page":"Antarctic deglaciation","title":"Antarctic deglaciation","text":"[Briggs2014]: Robert Briggs et al. (2014): A data constrained large ensemble analysis of Antarctic evolution since the Eemian","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"EditURL = \"inversion.jl\"","category":"page"},{"location":"examples/inversion.html#Parameter-inversion","page":"Parameter inversion","title":"Parameter inversion","text":"","category":"section"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"FastIsostasy relies on simplifications of the full GIA problem and might therefore need a calibration step to match the data, typically obtained from observations or from a \"golden-standard\" 3D GIA model. By means of an unscented Kalman inversion, one can, for instance, infer the appropriate field of effective mantle viscosity that matches the data best. Whereas this is known to be a tedious step, FastIsostasy is developped to ease the procedure by providing a convenience struct InversionProblem. We demonstrate this on a low-resolution grid since (1) the underlying unscented Kalman filter requires many simulations and (2) estimating high-resolution viscosity field might lead to overfit the problem. The effective viscosity field we estimate[Wiens2021] can be loaded by using load_wiens2021 with appropriate depths of the layer boundaries:","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"using CairoMakie, FastIsostasy\nOmega = ComputationDomain(3000e3, 5)\nc = PhysicalConstants()\nlb = [88e3, 180e3, 280e3, 400e3]\nlv = load_wiens2021(Omega)\np = LayeredEarth(Omega, layer_boundaries = lb, layer_viscosities = lv)","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"To make this problem more exciting, we shift the center of the ice load to $ (-1000, -1000) \\: \\mathrm{km} $ where the viscosity field displays a less uniform structure. For the sake of simplicity, the data to fit is obtained from a FastIsostasy simulation with the ground-truth viscosity field.","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"R, H = 1000e3, 1e3\nHice = uniform_ice_cylinder(Omega, R, H, center = [-1000e3, -1000e3])\nt_out = years2seconds.(1e3:1e3:2e3)\n\ntrue_viscosity = copy(p.effective_viscosity)\nfip = FastIsoProblem(Omega, c, p, t_out, false, Hice)\nsolve!(fip)","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"Now that we have the displacement field, we can recover the viscosity field from which it results. We therefore pass an InversionConfig and an InversionData to an InversionProblem. Let's look at the initialized viscosity field:","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"config = InversionConfig(N_iter = 15)\ndata = InversionData(copy(fip.out.t[2:end]), copy(fip.out.u[2:end]), copy([Hice, Hice]), config)\nparaminv = InversionProblem(deepcopy(fip), config, data)\n\nfunction plot_viscfields(paraminv)\n    estim_viscosity = copy(true_viscosity)\n    estim_viscosity[paraminv.data.idx] .= 10 .^ get_ϕ_mean_final(paraminv.priors, paraminv.ukiobj)\n\n    cmap = cgrad(:jet, rev = true)\n    crange = (20, 21.2)\n    fig = Figure()\n    axs = [Axis(fig[1,i], aspect = DataAspect()) for i in 1:2]\n    heatmap!(axs[1], log10.(true_viscosity), colormap = cmap, colorrange = crange)\n    heatmap!(axs[2], log10.(estim_viscosity), colormap = cmap, colorrange = crange)\n    Colorbar(fig[2, :], vertical = false, colormap = cmap, colorrange = crange,\n        width = Relative(0.5))\n    return fig\nend\nfig1 = plot_viscfields(paraminv)","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"By performing a Kalman inversion, we can achieve a close match between ground truth and estimated viscosity field:","category":"page"},{"location":"examples/inversion.html","page":"Parameter inversion","title":"Parameter inversion","text":"solve!(paraminv)\nfig2 = plot_viscfields(paraminv)\n\n#=\nThis remains an academic example, where we try to recover a known parameter field from data generated by the model itself. Nonetheless, the user should get a proof-of-concept and a scheme of how to implement such a procedure themself.","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"EditURL = \"tutorial.jl\"","category":"page"},{"location":"examples/tutorial.html#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"In this section, we will present some examples with idealised loads and solid-Earth parameters. This should give the user a basic understanding of FastIsostasy's basic functions.","category":"page"},{"location":"examples/tutorial.html#D-2D-Earth","page":"Tutorial","title":"3D ➡ 2D Earth","text":"","category":"section"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"FastIsostasy relies on a (polar) stereographic projection. Let's first create Omega::ComputationDomain and visualise how this relates to a domain on a spherical Earth:","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"using CairoMakie, FastIsostasy\n\nW = 3000e3      # (m) half-width of the domain Wx = Wy\nn = 7           # implies an Nx x Ny grid with Nx = Ny = 2^n = 128.\nOmega = ComputationDomain(W, n)\nfig = Figure(resolution = (1600, 800), fontsize = 24)\naxs = [Axis3(fig[1, j], title = [\"Original grid\", \"Projected grid\"][j]) for j in 1:2]\nwireframe!(axs[1], Omega.X .* Omega.K, Omega.Y .* Omega.K,\n    Omega.R .* cos.(deg2rad.(Omega.Lat)), color = :gray10, linewidth = 0.1)\nwireframe!(axs[2], Omega.X .* Omega.K, Omega.Y .* Omega.K,\n    Omega.null, color = :gray10, linewidth = 0.1)\nfor ax in axs\n    zlims!(ax, (0, 5e6))\n    hidedecorations!(ax)\n    hidespines!(ax)\nend\nfig","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"The distortion factor Omega.K is not only accessible but also accounted for in all the computations. The projection allows to treat the radially-layered, onion-like structure of the solid Earth as a superposition of horizontal layers. Furthermore, FastIsostasy reduces this 3D problem into a 2D problem by collapsing the depth dimension, mainly through the computation of an effective viscosity field that accounts for the superposition of layers with different viscosities. The user is required to provide the 3D information, which will then be used under the hood to compute the effective viscosity. This tutorial shows such an example.","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"We want to render a situation similar to the one depicted below:","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"(Image: Schematic representation of the three-layer set-up.)","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"Initializing a LayeredEarth with parameters corresponding to this situation automatically computes the conversion from a 3D to a 2D problem. Since we will compare our solution to an analytical one of a flat Earth, we exceptionally switch off the distortion correction. This can be simply executed by running:","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"Omega = ComputationDomain(W, n, projection_correction = false)\nc = PhysicalConstants(rho_litho = 0.0)\nlv = [1e19, 1e21]       # viscosity layers (Pa s)\nlb = [88e3, 400e3]      # depth of layer boundaries (m)\np = LayeredEarth(Omega, layer_viscosities = lv, layer_boundaries = lb)\nextrema(p.effective_viscosity)","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"As expected, the effective viscosity is a homogeneous field. It corresponds to a nonlinear mean of the layered values provided by the user. Note that we have set ŗho_litho = 0 to prevent the lithosphere from contributing to the hydrostatic, upward force. This is made to comply with the later computed analytical solution, which assumes a purely elastic lithosphere that does not generate a hydrostatic upward force when displaced. In reality, this is arguably wrong and the default choice c = PhysicalConstants() therefore uses ŗho_litho = 2600  mathrmkg  m^-3.","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"The next section shows how to use the now obtained p::LayeredEarth for actual GIA computation.","category":"page"},{"location":"examples/tutorial.html#Simple-load-and-geometry","page":"Tutorial","title":"Simple load and geometry","text":"","category":"section"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"We now apply a constant load, here a cylinder of ice with radius $ R = 1000 \\, \\mathrm{km} $ and thickness H = 1  mathrmkm, over Omega::ComputationDomain introduced in Multi-layer Earth. To formulate the problem conviniently, we use FastIsoProblem, a struct containing the variables and options that are necessary to perform the integration over time. We can then simply apply solve!(fip::FastIsoProblem) to perform the integration of the ODE. Under the hood, the ODE is obtained from the PDE by applying a Fourier collocation scheme contained in dudt_isostasy!. The integration is performed according to FastIsoProblem.diffeq::NamedTuple, which contains the algorithm and optionally tolerances, maximum iteration number... etc.","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"using CairoMakie\n\nR = 1000e3                  # ice disc radius (m)\nH = 1e3                     # ice disc thickness (m)\nHice = uniform_ice_cylinder(Omega, R, H)\nt_out = years2seconds.([0.0, 200.0, 600.0, 2000.0, 5000.0, 10_000.0, 50_000.0])\ninteractive_sealevel = false\nfip = FastIsoProblem(Omega, c, p, t_out, interactive_sealevel, Hice)\nsolve!(fip)\n\nfunction plot3D(fip, k_idx)\n    X, Y, out = Array(fip.Omega.X), Array(fip.Omega.Y), fip.out\n    zl = extrema(out.ue[end] + out.u[end])\n    fig = Figure(fontsize = 10)\n    for j in eachindex(k_idx)\n        ax = Axis3(fig[1, j])\n        u_tot = out.ue[k_idx[j]] + out.u[k_idx[j]]\n        surface!(ax, X, Y, u_tot, colormap = :cool)\n        wireframe!(ax, X, Y, u_tot, color = :black, linewidth = 0.1)\n        zlims!(ax, zl)\n    end\n    return fig\nend\nplot3D(fip, [lastindex(t_out) ÷ 2, lastindex(t_out)])","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"... and here goes the total displacement at t = 50  mathrmkyr. You can now access the elastic and viscous displacement at time t_out[k] by respectively calling fip.out.ue[k] and fip.out.u[k]. For the present case, the latter can be compared to an analytic solution that is known for this particular case. Let's look at the accuracy of our numerical scheme over time by running following plotting commands:","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"fig = Figure()\nax = Axis(fig[1, 1])\ncmap = cgrad(:jet, length(t_out), categorical = true)\nii, jj = Omega.Mx:Omega.Nx, Omega.My\nx = Omega.X[ii, jj]\nr = Omega.R[ii, jj]\n\n# A support vector for computing the analytical solution\nvsupport = vcat(1.0e-14, 10 .^ (-10:0.05:-3), 1.0)\n\nfor k in eachindex(t_out)\n    analytic_solution_r(r) = analytic_solution(r, t_out[k], c, p, H, R, vsupport)\n    u_analytic = analytic_solution_r.(r)\n    u_numeric = fip.out.u[k][ii, jj]\n    lines!(ax, x, u_analytic, color = cmap[k], linewidth = 5,\n        label = L\"$u_{ana}(t = %$(round(seconds2years(t_out[k]))) \\, \\mathrm{yr})$\")\n    lines!(ax, x, u_numeric, color = cmap[k], linewidth = 5, linestyle = :dash,\n        label = L\"$u_{num}(t = %$(round(seconds2years(t_out[k]))) \\, \\mathrm{yr})$\")\nend\naxislegend(ax, position = :rb, nbanks = 2, patchsize = (50.0f0, 20.0f0))\nfig","category":"page"},{"location":"examples/tutorial.html#GPU-support","page":"Tutorial","title":"GPU support","text":"","category":"section"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"For about n  7, the previous example can be computed even faster by using GPU parallelism. It could not represent less work from the user's perspective, as it boils down to calling ComputationDomain with an extra keyword argument and passing it to a ::LayeredEarth with the viscosity and depth values defined earlier:","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"n = 8\nOmega = ComputationDomain(W, n, use_cuda = true)\np = LayeredEarth(Omega, layer_viscosities = lv, layer_boundaries = lb)\nHice = uniform_ice_cylinder(Omega, R, H)\nfip = FastIsoProblem(Omega, c, p, t_out, interactive_sealevel, Hice)\nsolve!(fip)\nplot3D(fip, [lastindex(t_out) ÷ 2, lastindex(t_out)])","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"That's it, nothing more! For postprocessing, consider using reinit_structs_cpu.","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"info: Only CUDA supported!\nFor now only Nvidia GPUs are supported and there is no plan of extending this compatibility at this point.","category":"page"},{"location":"examples/tutorial.html#Make-your-own-time-loop","page":"Tutorial","title":"Make your own time loop","text":"","category":"section"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"As any high-level function, solve! has some limitations. An ice-sheet modeller typically wants to embed FastIsostasy within a time-stepping loop. This can be easily done by getting familiar with some intermediate-level functions like init, step! and write_out!:","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"Omega = ComputationDomain(3000e3, 6)\np = LayeredEarth(Omega)\nHice = uniform_ice_cylinder(Omega, R, H)\nfip = FastIsoProblem(Omega, c, p, t_out, interactive_sealevel, Hice)\n\nupdate_diagnostics!(fip.geostate.dudt, fip.geostate.u, fip, 0.0)\nwrite_out!(fip, 1)\node = init(fip)\n@inbounds for k in eachindex(fip.out.t)[2:end]\n    step!(fip, ode, (fip.out.t[k-1], fip.out.t[k]))\n    write_out!(fip, k)\nend\nplot3D(fip, [lastindex(t_out) ÷ 2, lastindex(t_out)])","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"info: Coupling to julia Ice-Sheet model\nIn case your Ice-Sheet model is programmed in julia, we highly recommend performing the coupling within the function updating the derivatives and let OrdinaryDiffEq.jl handle the rest.","category":"page"},{"location":"examples/tutorial.html","page":"Tutorial","title":"Tutorial","text":"warning: GPU not supported\nstep! does not support GPU computation so far. Make sure your model is initialized on CPU.","category":"page"},{"location":"introGIA.html#A-quick-introduction-to-GIA","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"","category":"section"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"The evolution of cryosphere components leads to changes in the vertical load applied upon the solid Earth, namely through changes of the ice, liquid water and sediment columns. Glacial isostatic adjustment (GIA) denotes the mechanical response of the solid Earth, which is characterized by its vertical and horizontal displacement. GIA models usually encompass related processes, such as the resulting changes in sea-surface height and the migration of shorelines.","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"The magnitude and time scale of GIA depends on the applied load and on solid-Earth parameters, i.e. the mantle viscosity, the lithosphere thickness and their respective density. These parameters display a radial and sometimes also a lateral variability, further jointly denoted by parameter \"heterogeneity\". For further details, please refer to [Wiens2021] and [Ivins2023].","category":"page"},{"location":"introGIA.html#Why-do-we-care?","page":"A quick introduction to GIA","title":"Why do we care?","text":"","category":"section"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"GIA is known to present many feedbacks on ice-sheet evolution. Their net effect is negative, meaning that GIA inhibits ice-sheet growth and retreat. In other words, it tends to stabilize a given state and is therefore particularly important in the context of paleo-climate and climate change.","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"The speed and magnitude of anthropogenic warming is a potential threat to the Greenland and the West-Antarctic ice sheets. They both represent an ice volume that could lead to multi-meter sea-level rise. The effect of GIA in this context appears to be particularly relevant - not only from a theoretical but also from a practical perspective, as a large portion of human livelihoods are concentrated along coasts.","category":"page"},{"location":"introGIA.html#Overview-of-GIA-models-for-ice-sheet-simulation","page":"A quick introduction to GIA","title":"Overview of GIA models for ice-sheet simulation","text":"","category":"section"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"GIA models present a wide range of complexity, which can only be briefly mentioned here. On the lower end, models such as the Elastic-Lithopshere/Viscous-Asthenopshere are cheap to run and easy to implement, which has made them popular within the ice-sheet modelling community. They present some acceptable limitations such as regionally approximating a global problem and lacking the radially layered structure of the solid Earth. However, some limitations have shown to be too important to be overlooked:","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"The GIA response is independent of the load's wavelength.\nThe heterogeneity of the lithospheric thickness and upper-mantle viscosity cannot be represented.\nChanges in sea-surface height due to changes in mass repartition are ignored.","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"On the higher end of the complexity spectrum, we find the 3D GIA models which address all the limitations of low-complexity models but are expensive to run, more tedious to couple to an ice-sheet model and generally lack a well-documented and open-source code base. Due to these drawbacks, they do not represent a standard tool within the ice-sheet modelling community. Although, they are becoming increasingly used, as for instance in [Gomez2018] and [VanCalcar2023], we believe that the expense of 3D GIA models can be avoided while still addressing the aforementioned limitations of simplistic models. Models specifically designed for ice-sheet modelling, such as [Bueler2007] and [Coulon2021], have shown first improvements in closing the gap between simplistic and expensive models. FastIsostasy continues this work by generalizing both of these contributions into one","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"We here omit to speak about other GIA models, since they lack the representation of heterogeneous solid-Earth parameters.","category":"page"},{"location":"introGIA.html#Where-is-FastIsosatsy.jl-on-the-complexity-ladder?","page":"A quick introduction to GIA","title":"Where is FastIsosatsy.jl on the complexity ladder?","text":"","category":"section"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":", while benchmarking results against 1D and 3D GIA models.","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"FastIsostasy heavily relies on the Fast-Fourier Transform (FFT), as (1) its central PDE is solved by applying a Fourier collocation scheme and (2) important diagnostic fields are computed by matrix convolutions which can famously be accelerated by the use of FFT. FFT therefore inspired the name \"FastIsostasy\", along with a GitHub repository that eased the first steps of this package. The use of a performant language such as julia, as well as supporting performance-relevant computations on GPU allows FastIsostasy to live up to the expectations of low computation time.","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"We believe that FastIsostasy drastically reduces the burdens associated with using a 3D GIA model while offering all the complexity needed for ice-sheet modelling. As targeted and efficient climate-change mitigation relies on a good representation of important mechanisms in numerical models, we believe that this can be a significant contribution for future research.","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"[Wiens2021]: Douglas Wiens et al. (2021): The seismic structure of the Antarctic upper mantle","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"[Ivins2023]: Erik Ivins et al. (2023): Antarctic upper mantle rheology","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"[Gomez2018]: Natalya Gomez et al. (2018): A Coupled Ice Sheet-Sea Level Model Incorporating 3D Earth Structure: Variations in Antarctica during the Last Deglacial Retreat","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"[VanCalcar2023]: Caroline van Calcar et al. (2023): Simulation of a fully coupled 3D GIA - ice-sheet model for the Antarctic Ice Sheet over a glacial cycle","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"[Bueler2007]: Ed Bueler et al. (2007): Fast computation of a viscoelastic deformable Earth model for ice-sheet simulations","category":"page"},{"location":"introGIA.html","page":"A quick introduction to GIA","title":"A quick introduction to GIA","text":"[Coulon2021]: Violaine Coulon et al. (2021): Contrasting Response of West and East Antarctic Ice Sheets to Glacial Isostatic Adjustment","category":"page"},{"location":"APIref.html#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"APIref.html#Basic-structs","page":"API reference","title":"Basic structs","text":"","category":"section"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"KernelMatrix\nComputationDomain\nPhysicalConstants\nLayeredEarth\nRefGeoState\nGeoState\nFastIsoTools\nFastIsoProblem","category":"page"},{"location":"APIref.html#FastIsostasy.KernelMatrix","page":"API reference","title":"FastIsostasy.KernelMatrix","text":"KernelMatrix\n\nAn allias for Union{Matrix{T}, CuMatrix{T}} where {T<:AbstractFloat}.\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.ComputationDomain","page":"API reference","title":"FastIsostasy.ComputationDomain","text":"ComputationDomain\nComputationDomain(W, n)\nComputationDomain(Wx, Wy, Nx, Ny)\n\nReturn a struct containing all information related to geometry of the domain and potentially used parallelism. To initialize one with 2*W and 2^n grid cells:\n\nOmega = ComputationDomain(W, n)\n\nIf a rectangular domain is needed, run:\n\nOmega = ComputationDomain(Wx, Wy, Nx, Ny)\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.PhysicalConstants","page":"API reference","title":"FastIsostasy.PhysicalConstants","text":"PhysicalConstants\n\nReturn a struct containing important physical constants. Comes with default values that can however be changed by the user, for instance by running:\n\nc = PhysicalConstants(rho_ice = 0.93)   # (kg/m^3)\n\nAll constants are given in SI units (kilogram, meter, second).\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.LayeredEarth","page":"API reference","title":"FastIsostasy.LayeredEarth","text":"LayeredEarth(Omega; layer_boundaries, layer_viscosities)\n\nReturn a struct containing all information related to the lateral variability of solid-Earth parameters. To initialize with values other than default, run:\n\nOmega = ComputationDomain(3000e3, 7)\nlb = [100e3, 300e3]\nlv = [1e19, 1e21]\np = LayeredEarth(Omega, layer_boundaries = lb, layer_viscosities = lv)\n\nwhich initializes a lithosphere of thickness T_1 = 100 mathrmkm, a viscous channel between T_1 and T_2 = 200 mathrmkm and a viscous halfspace starting at T_2. This represents a homogenous case. For heterogeneous ones, simply make lb::Vector{Matrix}, lv::Vector{Matrix} such that the vector elements represent the lateral variability of each layer on the grid of Omega::ComputationDomain.\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.RefGeoState","page":"API reference","title":"FastIsostasy.RefGeoState","text":"RefGeoState\n\nReturn a struct containing the reference GeoState.\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.GeoState","page":"API reference","title":"FastIsostasy.GeoState","text":"GeoState\n\nReturn a mutable struct containing the geostate which will be updated over the simulation. The geostate contains all the states of the [FastIsoProblem] to be solved.\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.FastIsoTools","page":"API reference","title":"FastIsostasy.FastIsoTools","text":"FastIsoTools(Omega, c, p)\n\nReturn a struct containing pre-computed tools to perform forward-stepping of the model. This includes the Green's functions for the computation of the lithosphere and geoid displacement, plans for FFTs, interpolators of the load and the viscosity over time and preallocated arrays.\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.FastIsoProblem","page":"API reference","title":"FastIsostasy.FastIsoProblem","text":"FastIsoProblem(Omega, c, p, t_out, interactive_sealevel)\nFastIsoProblem(Omega, c, p, t_out, interactive_sealevel, Hice)\nFastIsoProblem(Omega, c, p, t_out, interactive_sealevel, t_Hice, Hice)\n\nReturn a struct containing all the other structs needed for the forward integration of the model over Omega::ComputationDomain with parameters c::PhysicalConstants and p::LayeredEarth. The outputs are stored at t_out::Vector{<:AbstractFloat}.\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#Mechanics","page":"API reference","title":"Mechanics","text":"","category":"section"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"solve!(::FastIsoProblem)\ninit\nstep!\nupdate_diagnostics!\ndudt_isostasy!\nupdate_elasticresponse!","category":"page"},{"location":"APIref.html#FastIsostasy.solve!-Tuple{FastIsoProblem}","page":"API reference","title":"FastIsostasy.solve!","text":"solve!(fip)\n\nSolve the isostatic adjustment problem defined in fip::FastIsoProblem.\n\n\n\n\n\n","category":"method"},{"location":"APIref.html#FastIsostasy.init","page":"API reference","title":"FastIsostasy.init","text":"init(fip)\n\nInitialize an ode::CoupledODEs, aimed to be used in step!.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.step!","page":"API reference","title":"FastIsostasy.step!","text":"step!(fip)\n\nStep fip::FastIsoProblem over tspan and based on ode::CoupledODEs, typically obtained by init.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.update_diagnostics!","page":"API reference","title":"FastIsostasy.update_diagnostics!","text":"update_diagnostics!(dudt, u, fip, t)\n\nUpdate all the diagnotisc variables, i.e. all fields of fip.geostate apart from the displacement, which requires an integrator.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.dudt_isostasy!","page":"API reference","title":"FastIsostasy.dudt_isostasy!","text":"dudt_isostasy!()\n\nUpdate the displacement rate dudt of the viscous response.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.update_elasticresponse!","page":"API reference","title":"FastIsostasy.update_elasticresponse!","text":"update_elasticresponse!(fip::FastIsoProblem)\n\nUpdate the elastic response by convoluting the Green's function with the load anom. To use coefficients differing from [Farrell1972], see FastIsoTools.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#Parameter-inversion","page":"API reference","title":"Parameter inversion","text":"","category":"section"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"InversionConfig\nInversionData\nInversionProblem\nsolve!(::InversionProblem)","category":"page"},{"location":"APIref.html#FastIsostasy.InversionConfig","page":"API reference","title":"FastIsostasy.InversionConfig","text":"InversionConfig\n\nStruct containing configuration parameters for a [InversionProblem].\n\nNeed to choose regularization factor α ∈ (0,1],   When you have enough observation data α=1: no regularization\n\nupdate_freq 1 : approximate posterior cov matrix with an uninformative prior             0 : weighted average between posterior cov matrix with an uninformative prior and prior\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.InversionData","page":"API reference","title":"FastIsostasy.InversionData","text":"InversionData\n\nStruct containing data (either observational or output of a golden standard model) for a [InversionProblem].\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.InversionProblem","page":"API reference","title":"FastIsostasy.InversionProblem","text":"InversionProblem\n\nStruct containing variables and configs for the inversion of Solid-Earth parameter fields. For now, only viscosity can be inverted but future versions will support lithosphere rigidity. For now, the unscented Kalman inversion is the only method available but ensemble Kalman inversion will be available in future.\n\n\n\n\n\n","category":"type"},{"location":"APIref.html#FastIsostasy.solve!-Tuple{InversionProblem}","page":"API reference","title":"FastIsostasy.solve!","text":"solve!(paraminv::InversionProblem)\n\nReturn priors and ukiobj that allow to extract the results of the parameter inversion as initialized in paraminv.\n\n\n\n\n\n","category":"method"},{"location":"APIref.html#Utils","page":"API reference","title":"Utils","text":"","category":"section"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"years2seconds\nseconds2years\nm_per_sec2mm_per_yr\nmeshgrid\nscalefactor\nlatlon2stereo\nstereo2latlon\nwrite_out!","category":"page"},{"location":"APIref.html#FastIsostasy.years2seconds","page":"API reference","title":"FastIsostasy.years2seconds","text":"years2seconds(t::Real)\n\nConvert input time t from years to seconds.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.seconds2years","page":"API reference","title":"FastIsostasy.seconds2years","text":"seconds2years(t::Real)\n\nConvert input time t from seconds to years.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.m_per_sec2mm_per_yr","page":"API reference","title":"FastIsostasy.m_per_sec2mm_per_yr","text":"m_per_sec2mm_per_yr(dudt::Real)\n\nConvert displacement rate dudt from $ m \\, s^{-1} $ to $ mm \\, \\mathrm{yr}^{-1} $.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.meshgrid","page":"API reference","title":"FastIsostasy.meshgrid","text":"meshgrid(x, y)\n\nReturn a 2D meshgrid spanned by x, y.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.latlon2stereo","page":"API reference","title":"FastIsostasy.latlon2stereo","text":"latlon2stereo(lat, lon, lat0, lon0)\n\nCompute stereographic projection (x,y) for a given latitude lat longitude lon, reference latitude lat0 and reference longitude lon0. Optionally one can provide lat::KernelMatrix and lon::KernelMatrix if the projection is to be computed for the whole domain. Note: angles must be provided in degrees! Reference: John P. Snyder (1987), p. 157, eq. (21-2), (21-3), (21-4).\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.stereo2latlon","page":"API reference","title":"FastIsostasy.stereo2latlon","text":"stereo2latlon(x, y, lat0, lon0)\n\nCompute the inverse stereographic projection (lat, lon) based on Cartesian coordinates (x,y) and for a given reference latitude lat0 and reference longitude lon0. Optionally one can provide x::KernelMatrix and y::KernelMatrix if the projection is to be computed for the whole domain. Note: angles must be  para elloprovided in degrees!\n\nConvert stereographic (x,y)-coordinates to latitude-longitude. Reference: John P. Snyder (1987), p. 159, eq. (20-14), (20-15), (20-18), (21-15).\n\n\n\n\n\n","category":"function"},{"location":"APIref.html#FastIsostasy.write_out!","page":"API reference","title":"FastIsostasy.write_out!","text":"write_out!(fip::FastIsoProblem)\n\nWrite results in output vectors if the load is updated internally. If the load is updated externally, the user is responsible for writing results.\n\n\n\n\n\n","category":"function"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"[Goelzer2020]: Heiko Goelzer et al. (2020): Brief communication: On calculating the sea-level contribution in marine ice-sheet models","category":"page"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"[Snyder1987]: John Snyder (1987): Map projections – A working manual","category":"page"},{"location":"APIref.html","page":"API reference","title":"API reference","text":"[Farrell1972]: William Farrel (1972): Deformation of the Earth by surface Loads, Farell 1972","category":"page"},{"location":"index.html#FastIsostasy.jl","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"","category":"section"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"❄ Fast and friendly glacial isostatic adjustment on CPU and GPU.","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"FastIsostasy is a friendly and flexible software package for simulations of regional glacial isostatic adjustment (GIA) with laterally-variable mantle viscosity and lithospheric thickness. It is mainly adressed to ice-sheet modellers who seek for (1) a good representation of solid-Earth mechanics at virtually zero computational cost, (2) an approximation of the sea-level equation and (3) ready-to-use inversion tools to calibrate the model parameters to data. The simple interface of FastIsostasy allows to flexibly solve GIA problems within few lines of code. It is fully open-source under MIT license and was succesfully benchmarked against analytical, 1D GIA and 3D GIA model solutions.","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"FastIsostasy relies on a hybrid Fourier/finite-difference collocation of the problem introduced in [Cathles1975] and solved in [Lingle1985], [Bueler2007]. Thanks to a simplification of the full problem from 3D to 2D space and the use of optimized software packages, running kiloyears of regional GIA with Delta x = Delta y simeq 45  mathrmkm is a matter of seconds on a single CPU. For high resolution runs, the user can switch to GPU usage with minimal syntax change and enjoy the advantage of parallelization without requiring an HPC cluster. The central place of Fast-Fourier transforms in FastIsostasy's solving scheme inspired its name, along with a GitHub repository[Bueler2007] that eased the first steps of this package. For GIA \"purists\", this package is likely to miss interesting processes but we belive that its ridiculous run-time can help to fast-prototype a problem before transfering it to a more comprehensive model.","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"tip: Star us on GitHub!\nIf you have found this library useful, please consider starring it on GitHub. This gives us a lower bound of the satisfied user count.","category":"page"},{"location":"index.html#Getting-started","page":"FastIsostasy.jl","title":"Getting started","text":"","category":"section"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"FastIsostasy.jl is a registered julia package. To install it, please run:","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"using Pkg\nPkg.add(\"FastIsostasy\")","category":"page"},{"location":"index.html#How-to-read-the-docs?","page":"FastIsostasy.jl","title":"How to read the docs?","text":"","category":"section"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"If you want a quick introduction to GIA, please go to A quick introduction to GIA. If you want to have a thorough but still accessbile introduction to GIA, we highly recommend reading [Whitehouse2019]. If you want to get started right away, feel free to directly go to the Examples. If you face any problem using the code or want to know more about the functionalities of the package, visit the API reference. If you face a problem you cannot solve, please open a GitHub issue with a minimal and reproduceable example. We also welcome feature requests!","category":"page"},{"location":"index.html#Juliaecosystem","page":"FastIsostasy.jl","title":"Julia ecosystem","text":"","category":"section"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"FastIsostasy.jl was written thanks to the sheer amount of work that people invested in the vast and well-documented Julia ecosystem. Major help from packages deserves major appreciation, in particular for:","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"FFTW.jl\nCUDA.jl\nParallelStencil.jl\nInterpolations.jl\nOrdinaryDiffEq.jl\nDynamicalSystemsBase.jl\nDSP.jl\nKalmanEnsembleProcesses.jl","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"[Whitehouse2019]: Pippa Whitehouse et al. (2019): Solid Earth change and the evolution of the Antarctic Ice Sheet","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"[Cathles1975]: Lawrence Cathles (1985): Viscosity of the Earth's mantle","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"[Lingle1985]: Lingle and Clark (1985): A numerical model of interactions between a marine ice sheet and the solid earth: Application to a West Antarctic ice stream","category":"page"},{"location":"index.html","page":"FastIsostasy.jl","title":"FastIsostasy.jl","text":"[Bueler2007]: Ed Bueler et al. (2007): Fast computation of a viscoelastic deformable Earth model for ice-sheet simulations","category":"page"}]
}
